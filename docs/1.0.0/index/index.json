{"interfaceLanguages":{"swift":[{"children":[{"title":"Synchronization Primitives","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/init(value:)","title":"init(value: UInt)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/signal()","title":"func signal()","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/wait()","title":"func wait() async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/wait(fornanoseconds:)","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncsemaphore\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asyncsemaphore","title":"AsyncSemaphore","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/init(signaledinitially:)","title":"init(signaledInitially: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncevent\/signal()","title":"func signal()","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncevent\/wait()","title":"func wait() async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/wait(fornanoseconds:)","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncevent\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asyncevent","title":"AsyncEvent","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/init(until:initial:)","title":"init(until: UInt, initial: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/currentcount","title":"var currentCount: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/initialcount","title":"var initialCount: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/isset","title":"var isSet: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/limit","title":"let limit: UInt","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/increment(by:)","title":"func increment(by: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/reset()","title":"func reset()","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/reset(to:)","title":"func reset(to: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/signal()","title":"func signal()","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/signal(repeat:)","title":"func signal(repeat: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/wait()","title":"func wait() async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/wait(fornanoseconds:)","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/asynccountdownevent\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asynccountdownevent","title":"AsyncCountdownEvent","type":"class"},{"title":"Tasks Synchronization","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init()","title":"init()","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(cancelafternanoseconds:)","title":"convenience init(cancelAfterNanoseconds: UInt64)","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(linkedwith:)-4y7zh","title":"convenience init(linkedWith: CancellationSource...) async","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(linkedwith:)-5eu69","title":"init(linkedWith: [CancellationSource]) async","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel()","title":"func cancel() async","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(afternanoseconds:)","title":"func cancel(afterNanoseconds: UInt64) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/register(task:)","title":"func register<Success, Failure>(task: Task<Success, Failure>)","type":"method"}],"path":"\/documentation\/asyncobjects\/cancellationsource","title":"CancellationSource","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/init(queue:operation:)-2tbgm","title":"init(queue: DispatchQueue, operation: () async throws -> R)","type":"init"},{"path":"\/documentation\/asyncobjects\/taskoperation\/init(queue:operation:)-5qcns","title":"init(queue: DispatchQueue, operation: () async -> R)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isasynchronous","title":"var isAsynchronous: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isexecuting","title":"var isExecuting: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/result","title":"var result: Result<R, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/main()","title":"func main()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/signal()","title":"func signal()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/start()","title":"func start()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/wait()","title":"func wait() async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/wait(fornanoseconds:)","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/taskoperation\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskoperation","title":"TaskOperation","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/rawvalue","title":"let rawValue: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/barrier","title":"static let barrier: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/block","title":"static let block: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/detached","title":"static let detached: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/enforce","title":"static let enforce: TaskQueue.Flags","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags","title":"TaskQueue.Flags","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/init(priority:)","title":"init(priority: TaskPriority?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/blocked","title":"var blocked: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/currentrunning","title":"var currentRunning: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/priority","title":"let priority: TaskPriority?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/exec(priority:flags:operation:)-92nww","title":"func exec<T>(priority: TaskPriority?, flags: TaskQueue.Flags, operation: () async throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/exec(priority:flags:operation:)-qlw4","title":"func exec<T>(priority: TaskPriority?, flags: TaskQueue.Flags, operation: () async -> T) async -> T","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/signal()","title":"func signal()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/wait()","title":"func wait() async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/wait(fornanoseconds:)","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskqueue","title":"TaskQueue","type":"class"},{"title":"Data Transfer","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/init()","title":"init()","type":"init"},{"path":"\/documentation\/asyncobjects\/future\/init(attempttofulfill:)","title":"init(attemptToFulfill: (Future<Output, Failure>.Promise) async -> Void) async","type":"init"},{"path":"\/documentation\/asyncobjects\/future\/init(with:)","title":"init(with: Future<Output, Failure>.FutureResult) async","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/result","title":"var result: Future<Output, Failure>.FutureResult?","type":"property"},{"path":"\/documentation\/asyncobjects\/future\/value-65dee","title":"var value: Output","type":"property"},{"path":"\/documentation\/asyncobjects\/future\/value-7i3i1","title":"var value: Output","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(producing:)","title":"func fulfill(producing: Output)","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(throwing:)","title":"func fulfill(throwing: Failure)","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(with:)","title":"func fulfill(with: Future<Output, Failure>.FutureResult)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/futureresult","title":"Future.FutureResult","type":"typealias"},{"path":"\/documentation\/asyncobjects\/future\/promise","title":"Future.Promise","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/all(_:)-3grv8","title":"static func all([Future<Output, Failure>]) async -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:)-5qmjc","title":"static func all(Future<Output, Failure>...) async -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:)-8hzyo","title":"static func all([Future<Output, Failure>]) async -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:)-vovz","title":"static func all(Future<Output, Failure>...) async -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:)-49u8v","title":"static func allSettled(Future<Output, Failure>...) async -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:)-5rlms","title":"static func allSettled(Future<Output, Failure>...) async -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:)-6pbjp","title":"static func allSettled([Future<Output, Failure>]) async -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:)-9428o","title":"static func allSettled([Future<Output, Failure>]) async -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:)-27lks","title":"static func any([Future<Output, Failure>]) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:)-3026x","title":"static func any(Future<Output, Failure>...) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:)-5imc0","title":"static func any([Future<Output, Failure>]) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:)-la80","title":"static func any(Future<Output, Failure>...) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:)-1o20k","title":"static func race(Future<Output, Failure>...) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:)-3t7ol","title":"static func race([Future<Output, Failure>]) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:)-5ejrj","title":"static func race(Future<Output, Failure>...) async -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:)-93qn7","title":"static func race([Future<Output, Failure>]) async -> Future<Output, Failure>","type":"method"}],"path":"\/documentation\/asyncobjects\/future","title":"Future","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncobject\/signal()","title":"func signal() async","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncobject\/wait()","title":"func wait() async","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asyncobjects\/asyncobject\/wait(fornanoseconds:)-2a8l4","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"title":"AsyncObject Implementations","type":"groupMarker"}],"path":"\/documentation\/asyncobjects\/asyncobject\/wait(fornanoseconds:)-6vtfp","title":"func wait(forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncobject","title":"AsyncObject","type":"protocol"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/waitforall(_:)-7dije","title":"func waitForAll([AsyncObject]) async","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:)-9c4jf","title":"func waitForAll(AsyncObject...) async","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:fornanoseconds:)-26d4c","title":"func waitForAll([AsyncObject], forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:fornanoseconds:)-4rmk6","title":"func waitForAll(AsyncObject..., forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:)-31fef","title":"func waitForAny(AsyncObject..., count: Int) async","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:)-6x6ui","title":"func waitForAny([AsyncObject], count: Int) async","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:fornanoseconds:)-5cslv","title":"func waitForAny([AsyncObject], count: Int, forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:fornanoseconds:)-8b79w","title":"func waitForAny(AsyncObject..., count: Int, forNanoseconds: UInt64) async -> TaskTimeoutResult","type":"func"},{"path":"\/documentation\/asyncobjects\/waitfortaskcompletion(withtimeoutinnanoseconds:_:)","title":"func waitForTaskCompletion(withTimeoutInNanoseconds: UInt64, () async -> Void) async -> TaskTimeoutResult","type":"func"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/tasktimeoutresult\/success","title":"case success","type":"case"},{"path":"\/documentation\/asyncobjects\/tasktimeoutresult\/timedout","title":"case timedOut","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/tasktimeoutresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asyncobjects\/tasktimeoutresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/tasktimeoutresult","title":"TaskTimeoutResult","type":"enum"}],"path":"\/documentation\/asyncobjects","title":"AsyncObjects","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}