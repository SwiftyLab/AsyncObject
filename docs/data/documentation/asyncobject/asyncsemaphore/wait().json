{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait()"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobject\/asyncsemaphore\/wait()"]}],"schemaVersion":{"minor":2,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/AsyncObject\/documentation\/AsyncObject","doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wait","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Decrement the counting semaphore. If the resulting value is less than zero,","type":"text"},{"text":" ","type":"text"},{"text":"current task is suspended until a signal occurs.","type":"text"}]}]}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"wait","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"symbolKind":"method","externalID":"s:11AsyncObject0A9SemaphoreC4waityyYaF","roleHeading":"Instance Method","modules":[{"name":"AsyncObject"}],"title":"wait()","role":"symbol"},"abstract":[{"text":"Waits for, or decrements, a semaphore.","type":"text"}],"references":{"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore":{"abstract":[{"text":"An object that controls access to a resource across multiple task contexts through use of a traditional counting semaphore.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AsyncSemaphore","kind":"identifier"}],"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore","type":"topic","title":"AsyncSemaphore","url":"\/documentation\/asyncobject\/asyncsemaphore","navigatorTitle":[{"text":"AsyncSemaphore","kind":"identifier"}]},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/wait()":{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait()","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"wait","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"wait()","abstract":[{"type":"text","text":"Waits for, or decrements, a semaphore."}],"type":"topic","url":"\/documentation\/asyncobject\/asyncsemaphore\/wait()"},"doc://AsyncObject/documentation/AsyncObject":{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject","kind":"symbol","role":"collection","title":"AsyncObject","abstract":[{"type":"text","text":"Several synchronization primitives introduced to aid in modern swift concurrency. The primitives are very similar to those used in other operating systems including mutexes, condition variables, shared\/exclusive locks, and semaphores."}],"type":"topic","url":"\/documentation\/asyncobject"}}}