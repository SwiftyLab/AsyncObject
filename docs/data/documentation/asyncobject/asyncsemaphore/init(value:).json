{"hierarchy":{"paths":[["doc:\/\/AsyncObject\/documentation\/AsyncObject","doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore"]]},"variants":[{"paths":["\/documentation\/asyncobject\/asyncsemaphore\/init(value:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/init(value:)"},"abstract":[{"text":"Creates new counting semaphore with an initial value.","type":"text"},{"text":" ","type":"text"},{"text":"By default, initial value is zero.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"count","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":" = 0)","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"The newly created semaphore.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"parameters":[{"name":"count","content":[{"inlineContent":[{"type":"text","text":"The starting value for the semaphore."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Passing zero for the value is useful for when two threads need to reconcile the completion of a particular event.","type":"text"},{"text":" ","type":"text"},{"text":"Passing a value greater than zero is useful for managing a finite pool of resources, where the pool size is equal to the value.","type":"text"}]}],"kind":"content"}],"kind":"symbol","schemaVersion":{"major":0,"minor":2,"patch":0},"metadata":{"roleHeading":"Initializer","title":"init(value:)","role":"symbol","symbolKind":"init","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"modules":[{"name":"AsyncObject"}],"externalID":"s:11AsyncObject0A9SemaphoreC5valueACSu_tcfc"},"sections":[],"references":{"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore":{"abstract":[{"text":"An object that controls access to a resource across multiple task contexts through use of a traditional counting semaphore.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AsyncSemaphore","kind":"identifier"}],"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore","type":"topic","title":"AsyncSemaphore","url":"\/documentation\/asyncobject\/asyncsemaphore","navigatorTitle":[{"text":"AsyncSemaphore","kind":"identifier"}]},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/init(value:)":{"url":"\/documentation\/asyncobject\/asyncsemaphore\/init(value:)","kind":"symbol","identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/init(value:)","abstract":[{"text":"Creates new counting semaphore with an initial value.","type":"text"},{"text":" ","type":"text"},{"text":"By default, initial value is zero.","type":"text"}],"title":"init(value:)","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://AsyncObject/documentation/AsyncObject":{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject","kind":"symbol","role":"collection","title":"AsyncObject","abstract":[{"type":"text","text":"Several synchronization primitives introduced to aid in modern swift concurrency. The primitives are very similar to those used in other operating systems including mutexes, condition variables, shared\/exclusive locks, and semaphores."}],"type":"topic","url":"\/documentation\/asyncobject"}}}