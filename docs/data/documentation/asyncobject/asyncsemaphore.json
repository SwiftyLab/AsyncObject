{"schemaVersion":{"minor":2,"major":0,"patch":0},"metadata":{"title":"AsyncSemaphore","symbolKind":"class","externalID":"s:11AsyncObject0A9SemaphoreC","modules":[{"name":"AsyncObject"}],"navigatorTitle":[{"kind":"identifier","text":"AsyncSemaphore"}],"roleHeading":"Class","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"actor"},{"kind":"text","text":" "},{"kind":"identifier","text":"AsyncSemaphore"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"text":"An async semaphore is an efficient implementation of a traditional counting semaphore.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike traditional semaphore, async semaphore suspends current task instead of blocking threads.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You increment a semaphore count by calling the ","type":"text"},{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/signal()","isActive":true,"type":"reference"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"and decrement a semaphore count by calling ","type":"text"},{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait()","isActive":true,"type":"reference"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"text":"or its timeout variation ","type":"text"},{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait(forNanoseconds:)","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/AsyncObject\/documentation\/AsyncObject"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/init(value:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/signal()","doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait()","doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait(forNanoseconds:)"]}],"abstract":[{"text":"An object that controls access to a resource across multiple task contexts through use of a traditional counting semaphore.","type":"text"}],"sections":[],"identifier":{"url":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore","interfaceLanguage":"swift"},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/AsyncObject\/s8SendableP","doc:\/\/AsyncObject\/ScA"],"kind":"relationships","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/asyncobject\/asyncsemaphore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://AsyncObject/ScA":{"title":"_Concurrency.Actor","type":"unresolvable","identifier":"doc:\/\/AsyncObject\/ScA"},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/signal()":{"url":"\/documentation\/asyncobject\/asyncsemaphore\/signal()","kind":"symbol","identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/signal()","abstract":[{"text":"Signals (increments) a semaphore.","type":"text"}],"title":"signal()","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"signal","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore":{"abstract":[{"text":"An object that controls access to a resource across multiple task contexts through use of a traditional counting semaphore.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AsyncSemaphore","kind":"identifier"}],"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore","type":"topic","title":"AsyncSemaphore","url":"\/documentation\/asyncobject\/asyncsemaphore","navigatorTitle":[{"text":"AsyncSemaphore","kind":"identifier"}]},"doc://AsyncObject/documentation/AsyncObject":{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject","kind":"symbol","role":"collection","title":"AsyncObject","abstract":[{"type":"text","text":"Several synchronization primitives introduced to aid in modern swift concurrency. The primitives are very similar to those used in other operating systems including mutexes, condition variables, shared\/exclusive locks, and semaphores."}],"type":"topic","url":"\/documentation\/asyncobject"},"doc://AsyncObject/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/AsyncObject\/s8SendableP"},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/wait()":{"identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait()","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"wait","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"async","kind":"keyword"}],"title":"wait()","abstract":[{"type":"text","text":"Waits for, or decrements, a semaphore."}],"type":"topic","url":"\/documentation\/asyncobject\/asyncsemaphore\/wait()"},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/init(value:)":{"url":"\/documentation\/asyncobject\/asyncsemaphore\/init(value:)","kind":"symbol","identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/init(value:)","abstract":[{"text":"Creates new counting semaphore with an initial value.","type":"text"},{"text":" ","type":"text"},{"text":"By default, initial value is zero.","type":"text"}],"title":"init(value:)","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://AsyncObject/documentation/AsyncObject/AsyncSemaphore/wait(forNanoseconds:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wait","kind":"identifier"},{"text":"(","kind":"text"},{"text":"forNanoseconds","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt64","preciseIdentifier":"s:s6UInt64V","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"TaskTimeoutResult","preciseIdentifier":"s:11AsyncObject17TaskTimeoutResultO","kind":"typeIdentifier"}],"abstract":[{"text":"Waits for within the duration, or decrements, a semaphore.","type":"text"}],"url":"\/documentation\/asyncobject\/asyncsemaphore\/wait(fornanoseconds:)","identifier":"doc:\/\/AsyncObject\/documentation\/AsyncObject\/AsyncSemaphore\/wait(forNanoseconds:)","type":"topic","kind":"symbol","title":"wait(forNanoseconds:)","role":"symbol"}}}