{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/asyncsemaphore\/init(value:)"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/AsyncSemaphore"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/AsyncSemaphore\/init(value:)"},"kind":"symbol","metadata":{"roleHeading":"Initializer","modules":[{"name":"AsyncObjects"}],"role":"symbol","symbolKind":"init","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":")","kind":"text"}],"title":"init(value:)","externalID":"s:12AsyncObjects0A9SemaphoreC5valueACSu_tcfc"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":" "},{"kind":"internalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":" = 0)"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The newly created semaphore."}],"type":"paragraph"}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The starting value for the semaphore.","type":"text"}]}],"name":"count"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Passing zero for the value is useful for when two threads need to reconcile the completion of a particular event."},{"type":"text","text":" "},{"type":"text","text":"Passing a value greater than zero is useful for managing a finite pool of resources, where the pool size is equal to the value."}],"type":"paragraph"}]}],"abstract":[{"text":"Creates new counting semaphore with an initial value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"By default, initial value is zero."}],"references":{"doc://AsyncObjects/documentation/AsyncObjects/AsyncSemaphore":{"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AsyncSemaphore","kind":"identifier"}],"navigatorTitle":[{"text":"AsyncSemaphore","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AsyncSemaphore","url":"\/documentation\/asyncobjects\/asyncsemaphore","abstract":[{"type":"text","text":"An object that controls access to a resource across multiple task contexts through use of a traditional counting semaphore."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/AsyncSemaphore"},"doc://AsyncObjects/documentation/AsyncObjects/AsyncSemaphore/init(value:)":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"init(value:)","url":"\/documentation\/asyncobjects\/asyncsemaphore\/init(value:)","abstract":[{"type":"text","text":"Creates new counting semaphore with an initial value."},{"type":"text","text":" "},{"type":"text","text":"By default, initial value is zero."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/AsyncSemaphore\/init(value:)"},"doc://AsyncObjects/documentation/AsyncObjects":{"abstract":[{"text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency.","type":"text"}],"role":"collection","title":"AsyncObjects","url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic"}}}