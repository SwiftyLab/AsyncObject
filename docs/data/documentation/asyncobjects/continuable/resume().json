{"identifier":{"url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Continuable\/resume()","interfaceLanguage":"swift"},"metadata":{"title":"resume()","modules":[{"name":"AsyncObjects"}],"externalID":"s:12AsyncObjects11ContinuablePAAE6resumeyyyt7SuccessRtzrlF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"()","kind":"text"}],"roleHeading":"Instance Method","role":"symbol","extendedModule":"AsyncObjects"},"sections":[],"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Continuable"]]},"abstract":[{"text":"Resume the task that’s awaiting the continuation by returning.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/continuable\/resume()"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resume","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":" == ()","kind":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"A continuation must be resumed at least once.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"After calling this method, control immediately returns to the caller."},{"type":"text","text":" "},{"type":"text","text":"The task continues executing when its executor schedules it."}],"type":"paragraph"}]}],"references":{"doc://AsyncObjects/documentation/AsyncObjects":{"abstract":[{"text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency.","type":"text"}],"role":"collection","title":"AsyncObjects","url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic"},"doc://AsyncObjects/documentation/AsyncObjects/Continuable/resume()":{"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Continuable\/resume()","title":"resume()","url":"\/documentation\/asyncobjects\/continuable\/resume()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"resume"},{"kind":"text","text":"()"}],"kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"Resume the task that’s awaiting the continuation by returning."}]},"doc://AsyncObjects/documentation/AsyncObjects/Continuable":{"title":"Continuable","url":"\/documentation\/asyncobjects\/continuable","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Continuable","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"text":"A type that allows to interface between synchronous and asynchronous code,","type":"text"},{"text":" ","type":"text"},{"text":"by representing task state and allowing task resuming with some value or error.","type":"text"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Continuable","navigatorTitle":[{"text":"Continuable","kind":"identifier"}]}}}