{"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/TaskQueue"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"exec"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"barrier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = false, "},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:ScP","text":"TaskPriority"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}],"platforms":["Linux"]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result from provided operation."}]}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"barrier","content":[{"inlineContent":[{"text":"If the task should run as a barrier blocking queue.","type":"text"}],"type":"paragraph"}]},{"name":"priority","content":[{"inlineContent":[{"text":"The priority of the task.","type":"text"},{"text":" ","type":"text"},{"text":"Pass nil to use the priority from ","type":"text"},{"code":"Task.currentPriority","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"task","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The throwing operation to perform."}]}]}]},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Immediately runs the provided operation if queue isn’t locked by barrier task,","type":"text"},{"text":" ","type":"text"},{"text":"otherwise adds operation to queue to be executed later.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can set the ","type":"text"},{"code":"barrier","type":"codeVoice"},{"text":" flag to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" to block queue until provided operation finishes.","type":"text"},{"text":" ","type":"text"},{"text":"By default, the flag is set to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":". When opting in to run operation as barrier,","type":"text"},{"text":" ","type":"text"},{"text":"only newly submitted operations will be added to queue to be executed later,","type":"text"},{"text":" ","type":"text"},{"text":"while already running operations won’t be affected.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a new barrier task is added while queue is locked by another barrier task,"},{"type":"text","text":" "},{"type":"text","text":"the new task will be added queue and will only block tasks that are added after it to the queue."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"CancellationError"},{"type":"text","text":" if cancelled, or error from provided operation."}]}],"type":"aside","style":"note","name":"Throws"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If task that added the operation to queue is cancelled,","type":"text"},{"text":" ","type":"text"},{"text":"the provided operation also cancelled cooperatively if already started","type":"text"},{"text":" ","type":"text"},{"text":"or the operation execution is skipped if only queued and not started.","type":"text"}]}],"type":"aside","style":"note"}],"kind":"content"}],"identifier":{"url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/TaskQueue\/exec(barrier:priority:task:)-3a9s9","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/taskqueue\/exec(barrier:priority:task:)-3a9s9"]}],"abstract":[{"type":"text","text":"Executes the given throwing operation asynchronously."}],"sections":[],"kind":"symbol","metadata":{"symbolKind":"method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"exec","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"barrier","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"exec(barrier:priority:task:)","externalID":"s:12AsyncObjects9TaskQueueC4exec7barrier8priority4taskxSb_ScPSgxyYaYbKctYaKlF","modules":[{"name":"AsyncObjects"}],"roleHeading":"Instance Method"},"schemaVersion":{"major":0,"patch":0,"minor":2},"references":{"doc://AsyncObjects/documentation/AsyncObjects/TaskQueue/exec(barrier:priority:task:)-3a9s9":{"role":"symbol","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/TaskQueue\/exec(barrier:priority:task:)-3a9s9","type":"topic","abstract":[{"type":"text","text":"Executes the given throwing operation asynchronously."}],"kind":"symbol","title":"exec(barrier:priority:task:)","url":"\/documentation\/asyncobjects\/taskqueue\/exec(barrier:priority:task:)-3a9s9","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"exec"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"barrier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","kind":"typeIdentifier","text":"TaskPriority"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"task"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://AsyncObjects/documentation/AsyncObjects/TaskQueue":{"role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskQueue"}],"title":"TaskQueue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TaskQueue"}],"type":"topic","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/TaskQueue","url":"\/documentation\/asyncobjects\/taskqueue","abstract":[{"type":"text","text":"An object that acts as a concurrent queue executing submitted tasks concurrently."}]},"doc://AsyncObjects/documentation/AsyncObjects":{"abstract":[{"text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency.","type":"text"}],"type":"topic","role":"collection","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","title":"AsyncObjects","url":"\/documentation\/asyncobjects","kind":"symbol"}}}