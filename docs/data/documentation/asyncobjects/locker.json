{"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/AsyncObjects\/10Foundation9NSCopyingP","doc:\/\/AsyncObjects\/SQ","doc:\/\/AsyncObjects\/SH","doc:\/\/AsyncObjects\/s8SendableP"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"text":"The values stored in the lock should be considered opaque and implementation defined,","type":"text"},{"text":" ","type":"text"},{"text":"they contain thread ownership information that the system may use to attempt to resolve priority inversions.","type":"text"},{"text":" ","type":"text"},{"text":"This lock must be unlocked from the same thread that locked it,","type":"text"},{"text":" ","type":"text"},{"text":"attempts to unlock from a different thread will cause an assertion aborting the process.","type":"text"},{"text":" ","type":"text"},{"text":"This lock must not be accessed from multiple processes or threads via shared or multiply-mapped memory,","type":"text"},{"text":" ","type":"text"},{"text":"as the lock implementation relies on the address of the lock value and owning process.","type":"text"}],"type":"paragraph"},{"code":["\/\/ create a lock object to provide","\/\/ exclusive access to critical resources","let lock = Locker()","\/\/ perform critical mutually exclusive action","lock.perform { \/* some action *\/ }","","\/\/ inside the critical action provided","\/\/ lock.perform can be called safely","lock.perform {","  lock.perform { \/\/ works and runs with current context","    \/* some action *\/","  }","}"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects"]]},"metadata":{"roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"symbolKind":"class","modules":[{"name":"AsyncObjects"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"externalID":"s:12AsyncObjects6LockerC","title":"Locker"},"kind":"symbol","variants":[{"paths":["\/documentation\/asyncobjects\/locker"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)"],"title":"Operators"},{"identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()"],"title":"Initializers"},{"identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/NSCopying-Implementations"],"title":"Default Implementations","generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"},"abstract":[{"text":"A synchronization object that can be used to provide exclusive access to threads.","type":"text"}],"references":{"doc://AsyncObjects/documentation/AsyncObjects/Locker/perform(_:)":{"role":"symbol","title":"perform(_:)","type":"topic","kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/perform(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"perform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)","abstract":[{"text":"Performs a critical piece of work synchronously after acquiring the lock","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and releases lock when task completes."}]},"doc://AsyncObjects/documentation/AsyncObjects/Locker/hash(into:)":{"role":"symbol","title":"hash(into:)","type":"topic","kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/hash(into:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV","text":"Hasher"},{"kind":"text","text":")"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)","abstract":[{"text":"Hashes the pointer to platform dependent lock primitive","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by feeding into the given hasher."}]},"doc://AsyncObjects/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/AsyncObjects\/SH"},"doc://AsyncObjects/documentation/AsyncObjects":{"abstract":[{"text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency.","type":"text"}],"role":"collection","title":"AsyncObjects","url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic"},"doc://AsyncObjects/10Foundation9NSCopyingP":{"title":"Foundation.NSCopying","type":"unresolvable","identifier":"doc:\/\/AsyncObjects\/10Foundation9NSCopyingP"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/Equatable-Implementations":{"kind":"article","url":"\/documentation\/asyncobjects\/locker\/equatable-implementations","abstract":[],"title":"Equatable Implementations","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations","type":"topic","role":"collectionGroup"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/copy(with:)":{"role":"symbol","title":"copy(with:)","type":"topic","kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/copy(with:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation6NSZoneV","text":"NSZone"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","abstract":[{"text":"Returns current instance thatâ€™s a copy of the receiver.","type":"text"}]},"doc://AsyncObjects/documentation/AsyncObjects/Locker/init()":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Allocates and initializes platform dependent lock primitive."}],"kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()","title":"init()"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/NSCopying-Implementations":{"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/NSCopying-Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/asyncobjects\/locker\/nscopying-implementations","title":"NSCopying Implementations","kind":"article","abstract":[]},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"type":"topic","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"url":"\/documentation\/asyncobjects\/locker","abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"title":"Locker","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"kind":"symbol"},"doc://AsyncObjects/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/AsyncObjects\/s8SendableP"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/==(_:_:)":{"role":"symbol","title":"==(_:_:)","type":"topic","kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:12AsyncObjects6LockerC","text":"Locker"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:12AsyncObjects6LockerC","text":"Locker"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two locks are equal."}]},"doc://AsyncObjects/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/AsyncObjects\/SQ"}}}