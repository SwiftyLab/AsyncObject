{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values stored in the lock should be considered opaque and implementation defined,"},{"type":"text","text":" "},{"type":"text","text":"they contain thread ownership information that the system may use to attempt to resolve priority inversions."},{"type":"text","text":" "},{"type":"text","text":"This lock must be unlocked from the same thread that locked it,"},{"type":"text","text":" "},{"type":"text","text":"attempts to unlock from a different thread will cause an assertion aborting the process."},{"type":"text","text":" "},{"type":"text","text":"This lock must not be accessed from multiple processes or threads via shared or multiply-mapped memory,"},{"type":"text","text":" "},{"type":"text","text":"as the lock implementation relies on the address of the lock value and owning process."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ create a lock object to provide","\/\/ exclusive access to critical resources","let lock = Locker()","\/\/ perform critical mutually exclusive action","lock.perform { \/* some action *\/ }","","\/\/ inside the critical action provided","\/\/ lock.perform can be called safely","lock.perform {","  lock.perform { \/\/ works and runs with current context","    \/* some action *\/","  }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncobjects\/locker"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/AsyncObjects\/objc(pl)NSCopying","doc:\/\/AsyncObjects\/SQ","doc:\/\/AsyncObjects\/SH","doc:\/\/AsyncObjects\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"title":"Locker","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:12AsyncObjects6LockerC","modules":[{"name":"AsyncObjects"}],"navigatorTitle":[{"kind":"identifier","text":"Locker"}]},"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects"]]},"topicSections":[{"title":"Operators","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)"]},{"title":"Initializers","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations"],"generated":true}],"references":{"doc://AsyncObjects/documentation/AsyncObjects/Locker/perform(_:)":{"role":"symbol","title":"perform(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"perform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Performs a critical piece of work synchronously after acquiring the lock"},{"type":"text","text":" "},{"type":"text","text":"and releases lock when task completes."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/perform(_:)"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/==(_:_:)":{"role":"symbol","title":"==(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Locker","preciseIdentifier":"s:12AsyncObjects6LockerC"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Locker","preciseIdentifier":"s:12AsyncObjects6LockerC"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two locks are equal."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/==(_:_:)"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/init()":{"role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Allocates and initializes platform dependent lock primitive."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/init()"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/Equatable-Implementations":{"role":"collectionGroup","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations","kind":"article","type":"topic","url":"\/documentation\/asyncobjects\/locker\/equatable-implementations"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/copy(with:)":{"role":"symbol","title":"copy(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10ObjectiveC6NSZoneV"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}],"abstract":[{"type":"text","text":"Returns current instance thatâ€™s a copy of the receiver."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/copy(with:)"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/hash(into:)":{"role":"symbol","title":"hash(into:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"kind":"text","text":"("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Hasher","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Hashes the pointer to platform dependent lock primitive"},{"type":"text","text":" "},{"type":"text","text":"by feeding into the given hasher."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/hash(into:)"},"doc://AsyncObjects/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/AsyncObjects\/s8SendableP"},"doc://AsyncObjects/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/AsyncObjects\/SQ"},"doc://AsyncObjects/objc(pl)NSCopying":{"type":"unresolvable","title":"Foundation.NSCopying","identifier":"doc:\/\/AsyncObjects\/objc(pl)NSCopying"},"doc://AsyncObjects/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/AsyncObjects\/SH"},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"role":"symbol","title":"Locker","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"url":"\/documentation\/asyncobjects\/locker"},"doc://AsyncObjects/documentation/AsyncObjects":{"role":"collection","title":"AsyncObjects","abstract":[{"type":"text","text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects"}}}