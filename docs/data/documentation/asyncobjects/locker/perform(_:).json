{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/locker\/perform(_:)"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)"},"kind":"symbol","metadata":{"roleHeading":"Instance Method","modules":[{"name":"AsyncObjects"}],"role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"perform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">(() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"title":"perform(_:)","externalID":"s:12AsyncObjects6LockerC7performyxxyKXEKlF"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"perform","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"critical","kind":"internalParam"},{"text":": () ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The result from the critical task."}]}],"kind":"content"},{"parameters":[{"name":"critical","content":[{"type":"paragraph","inlineContent":[{"text":"The critical task to perform.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Use this to perform critical tasks or provide access to critical resource","type":"text"},{"text":" ","type":"text"},{"text":"that require exclusivity among other concurrent tasks.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This method checks if thread has already acquired lock and performs task","type":"text"},{"text":" ","type":"text"},{"text":"without releasing the lock. This allows safer lock management eliminating","type":"text"},{"text":" ","type":"text"},{"text":"potential runtime errors.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Throws","content":[{"inlineContent":[{"text":"Error occurred running critical task.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"abstract":[{"text":"Performs a critical piece of work synchronously after acquiring the lock","type":"text"},{"text":" ","type":"text"},{"text":"and releases lock when task completes.","type":"text"}],"references":{"doc://AsyncObjects/documentation/AsyncObjects/Locker/perform(_:)":{"role":"symbol","title":"perform(_:)","type":"topic","kind":"symbol","url":"\/documentation\/asyncobjects\/locker\/perform(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"perform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)","abstract":[{"text":"Performs a critical piece of work synchronously after acquiring the lock","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and releases lock when task completes."}]},"doc://AsyncObjects/documentation/AsyncObjects":{"abstract":[{"text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency.","type":"text"}],"role":"collection","title":"AsyncObjects","url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic"},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"type":"topic","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"url":"\/documentation\/asyncobjects\/locker","abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"title":"Locker","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"kind":"symbol"}}}