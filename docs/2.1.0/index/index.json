{"interfaceLanguages":{"swift":[{"children":[{"title":"Synchronization Primitives","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/init(value:)","title":"init(value: UInt)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncsemaphore\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncsemaphore\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/asyncobjects\/asyncsemaphore\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asyncsemaphore","title":"AsyncSemaphore","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/init(signaledinitially:)","title":"init(signaledInitially: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/reset(file:function:line:)","title":"func reset(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncevent\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncevent\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncevent\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncevent\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncevent\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/asyncobjects\/asyncevent\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asyncevent","title":"AsyncEvent","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/init(until:initial:)","title":"init(until: UInt, initial: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/currentcount","title":"var currentCount: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/initialcount","title":"var initialCount: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/isset","title":"var isSet: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/limit","title":"let limit: UInt","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/increment(by:file:function:line:)","title":"func increment(by: UInt, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/reset(to:file:function:line:)","title":"func reset(to: UInt?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/signal(repeat:file:function:line:)","title":"func signal(repeat: UInt, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/asynccountdownevent\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asynccountdownevent\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/asyncobjects\/asynccountdownevent\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/asynccountdownevent","title":"AsyncCountdownEvent","type":"class"},{"title":"Tasks Synchronization","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init()","title":"init()","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(at:clock:file:function:line:)","title":"init<C>(at: C.Instant, clock: C, file: String, function: String, line: UInt)","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(cancelafternanoseconds:file:function:line:)","title":"init(cancelAfterNanoseconds: UInt64, file: String, function: String, line: UInt)","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(linkedwith:file:function:line:)-6fxn7","title":"init(linkedWith: CancellationSource..., file: String, function: String, line: UInt)","type":"init"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/init(linkedwith:file:function:line:)-gfw3","title":"init(linkedWith: [CancellationSource], file: String, function: String, line: UInt)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(afternanoseconds:file:function:line:)-674yp","title":"func cancel(afterNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(afternanoseconds:file:function:line:)-7m7ff","title":"func cancel(afterNanoseconds: UInt64, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(at:clock:file:function:line:)-5ipsf","title":"func cancel<C>(at: C.Instant, clock: C, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(at:clock:file:function:line:)-a0qm","title":"func cancel<C>(at: C.Instant, clock: C, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/cancel(file:function:line:)","title":"func cancel(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/register(task:file:function:line:)","title":"func register<C>(task: C, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellationsource\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/cancellationsource\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/cancellationsource","title":"CancellationSource","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/init(synchronizedwith:priority:flags:operation:)","title":"init(synchronizedWith: Locker, priority: TaskPriority?, flags: TaskOperation<R>.Flags, operation: () async throws -> R)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/flags-swift.property","title":"let flags: TaskOperation<R>.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isasynchronous","title":"var isAsynchronous: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/iscancelled","title":"var isCancelled: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isexecuting","title":"var isExecuting: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/priority","title":"let priority: TaskPriority?","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperation\/result","title":"var result: Result<R, Error>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/cancel()","title":"func cancel()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/main()","title":"func main()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/start()","title":"func start()","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/flags-swift.typealias","title":"TaskOperation.Flags","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperation\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperation\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/taskoperation\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskoperation","title":"TaskOperation","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/rawvalue","title":"let rawValue: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/barrier","title":"static let barrier: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/block","title":"static let block: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/detached","title":"static let detached: TaskQueue.Flags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/enforce","title":"static let enforce: TaskQueue.Flags","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskqueue\/flags","title":"TaskQueue.Flags","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/init(priority:)","title":"init(priority: TaskPriority?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/blocked","title":"var blocked: Bool","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/currentrunning","title":"var currentRunning: UInt","type":"property"},{"path":"\/documentation\/asyncobjects\/taskqueue\/priority","title":"let priority: TaskPriority?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/addtask(priority:flags:file:function:line:operation:)-1d22z","title":"func addTask<T>(priority: TaskPriority?, flags: TaskQueue.Flags, file: String, function: String, line: UInt, operation: () async -> T)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/addtask(priority:flags:file:function:line:operation:)-9juv1","title":"func addTask<T>(priority: TaskPriority?, flags: TaskQueue.Flags, file: String, function: String, line: UInt, operation: () async throws -> T)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/exec(priority:flags:file:function:line:operation:)-8vi7i","title":"func exec<T>(priority: TaskPriority?, flags: TaskQueue.Flags, file: String, function: String, line: UInt, operation: () async throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/exec(priority:flags:file:function:line:operation:)-et","title":"func exec<T>(priority: TaskPriority?, flags: TaskQueue.Flags, file: String, function: String, line: UInt, operation: () async -> T) async -> T","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/taskqueue\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/taskqueue\/asyncobject-implementations","title":"AsyncObject Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskqueue\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/asyncobjects\/taskqueue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskqueue","title":"TaskQueue","type":"class"},{"title":"Data Transfer","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/init()","title":"init()","type":"init"},{"path":"\/documentation\/asyncobjects\/future\/init(file:function:line:attempttofulfill:)","title":"convenience init(file: String, function: String, line: UInt, attemptToFulfill: (Future<Output, Failure>.Promise) async -> Void)","type":"init"},{"path":"\/documentation\/asyncobjects\/future\/init(with:)","title":"init(with: Future<Output, Failure>.FutureResult)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/result","title":"var result: Future<Output, Failure>.FutureResult?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(producing:file:function:line:)","title":"func fulfill(producing: Output, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(throwing:file:function:line:)","title":"func fulfill(throwing: Failure, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/fulfill(with:file:function:line:)","title":"func fulfill(with: Future<Output, Failure>.FutureResult, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/get(file:function:line:)-1a7j8","title":"func get(file: String, function: String, line: UInt) async -> Output","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/get(file:function:line:)-7u30","title":"func get(file: String, function: String, line: UInt) async throws -> Output","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/futureresult","title":"Future.FutureResult","type":"typealias"},{"path":"\/documentation\/asyncobjects\/future\/promise","title":"Future.Promise","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/all(_:file:function:line:)-5g5yy","title":"static func all([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:file:function:line:)-5nj1v","title":"static func all(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:file:function:line:)-6q9ip","title":"static func all(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/all(_:file:function:line:)-9c6br","title":"static func all([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<[Output], Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:file:function:line:)-1bddw","title":"static func allSettled(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:file:function:line:)-1bi3q","title":"static func allSettled([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:file:function:line:)-9c4k6","title":"static func allSettled(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/allsettled(_:file:function:line:)-9c9nz","title":"static func allSettled([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<[Future<Output, Failure>.FutureResult], Never>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:file:function:line:)-3ig6s","title":"static func any([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:file:function:line:)-5n0xz","title":"static func any(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:file:function:line:)-8y4h","title":"static func any([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/any(_:file:function:line:)-9dtps","title":"static func any(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:file:function:line:)-2txs9","title":"static func race(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:file:function:line:)-8tvtl","title":"static func race([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:file:function:line:)-9rzni","title":"static func race([Future<Output, Failure>], file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"path":"\/documentation\/asyncobjects\/future\/race(_:file:function:line:)-t6qy","title":"static func race(Future<Output, Failure>..., file: String, function: String, line: UInt) -> Future<Output, Failure>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/future\/halfwidthcornerquoted","title":"var halfWidthCornerQuoted: String","type":"property"}],"path":"\/documentation\/asyncobjects\/future\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/future","title":"Future","type":"class"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/locker\/==(_:_:)","title":"static func == (Locker, Locker) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/locker\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/locker\/copy(with:)","title":"func copy(with: NSZone?) -> Any","type":"method"},{"path":"\/documentation\/asyncobjects\/locker\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/asyncobjects\/locker\/perform(_:)","title":"func perform<R>(() throws -> R) rethrows -> R","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/locker\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asyncobjects\/locker\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/locker\/copy()","title":"func copy() -> Any","type":"method"}],"path":"\/documentation\/asyncobjects\/locker\/nscopying-implementations","title":"NSCopying Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/locker","title":"Locker","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/asyncobject\/signal(file:function:line:)","title":"func signal(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncobject\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncobject\/wait(fornanoseconds:file:function:line:)","title":"func wait(forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"method"},{"path":"\/documentation\/asyncobjects\/asyncobject\/wait(until:tolerance:clock:file:function:line:)","title":"func wait<C>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/asyncobject","title":"AsyncObject","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/cancellable\/cancel(file:function:line:)","title":"func cancel(file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/asyncobjects\/cancellable\/wait(file:function:line:)","title":"func wait(file: String, function: String, line: UInt) async throws","type":"method"}],"path":"\/documentation\/asyncobjects\/cancellable","title":"Cancellable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/continuable\/failure","title":"Failure","type":"associatedtype"},{"path":"\/documentation\/asyncobjects\/continuable\/success","title":"Success","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/continuable\/cancel()-46gpe","title":"func cancel()","type":"method"},{"path":"\/documentation\/asyncobjects\/continuable\/cancel()-7ca4g","title":"func cancel()","type":"method"},{"path":"\/documentation\/asyncobjects\/continuable\/resume()","title":"func resume()","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asyncobjects\/continuable\/resume(returning:)-8x6mo","title":"func resume(returning: Self.Success)","type":"method"}],"title":"Continuable Implementations","type":"groupMarker"}],"path":"\/documentation\/asyncobjects\/continuable\/resume(returning:)-655td","title":"func resume(returning: Self.Success)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/asyncobjects\/continuable\/resume(throwing:)-i9jq","title":"func resume(throwing: Self.Failure)","type":"method"}],"title":"Continuable Implementations","type":"groupMarker"}],"path":"\/documentation\/asyncobjects\/continuable\/resume(throwing:)-9qp75","title":"func resume(throwing: Self.Failure)","type":"method"},{"path":"\/documentation\/asyncobjects\/continuable\/resume(with:)","title":"func resume(with: Result<Self.Success, Self.Failure>)","type":"method"}],"path":"\/documentation\/asyncobjects\/continuable","title":"Continuable","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/durationtimeouterror\/init(for:tolerance:)","title":"init(for: UInt64, tolerance: UInt64)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/durationtimeouterror\/duration","title":"let duration: UInt64","type":"property"},{"path":"\/documentation\/asyncobjects\/durationtimeouterror\/tolerance","title":"let tolerance: UInt64","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/durationtimeouterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asyncobjects\/durationtimeouterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/durationtimeouterror","title":"DurationTimeoutError","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/earlyinvokeerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asyncobjects\/earlyinvokeerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/earlyinvokeerror","title":"EarlyInvokeError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/init(rawvalue:)","title":"init(rawValue: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/rawvalue","title":"let rawValue: UInt8","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/detached","title":"static let detached: TaskOperationFlags","type":"property"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/trackunstructuredtasks","title":"static let trackUnstructuredTasks: TaskOperationFlags","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/asyncobjects\/taskoperationflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/contains(_:)","title":"func contains(Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/formintersection(_:)","title":"func formIntersection(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/formsymmetricdifference(_:)","title":"func formSymmetricDifference(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/formunion(_:)","title":"func formUnion(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/insert(_:)","title":"func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/intersection(_:)","title":"func intersection(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/symmetricdifference(_:)","title":"func symmetricDifference(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/union(_:)","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/update(with:)","title":"func update(with: Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/asyncobjects\/taskoperationflags\/optionset-implementations","title":"OptionSet Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/isdisjoint(with:)","title":"func isDisjoint(with: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/isstrictsubset(of:)","title":"func isStrictSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/isstrictsuperset(of:)","title":"func isStrictSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/issubset(of:)","title":"func isSubset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/issuperset(of:)","title":"func isSuperset(of: Self) -> Bool","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/subtract(_:)","title":"func subtract(Self)","type":"method"},{"path":"\/documentation\/asyncobjects\/taskoperationflags\/subtracting(_:)","title":"func subtracting(Self) -> Self","type":"method"}],"path":"\/documentation\/asyncobjects\/taskoperationflags\/setalgebra-implementations","title":"SetAlgebra Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/taskoperationflags","title":"TaskOperationFlags","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/timeouterror\/init(until:tolerance:)","title":"init(until: C.Instant, tolerance: C.Instant.Duration?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/timeouterror\/deadline","title":"let deadline: C.Instant","type":"property"},{"path":"\/documentation\/asyncobjects\/timeouterror\/tolerance","title":"let tolerance: C.Duration?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/timeouterror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/asyncobjects\/timeouterror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/asyncobjects\/timeouterror","title":"TimeoutError","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/waitforall(_:file:function:line:)-4ax6f","title":"func waitForAll([AsyncObject], file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:file:function:line:)-5bu52","title":"func waitForAll(AsyncObject..., file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:fornanoseconds:file:function:line:)-8qwpx","title":"func waitForAll(AsyncObject..., forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:fornanoseconds:file:function:line:)-w1pd","title":"func waitForAll([AsyncObject], forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:until:tolerance:clock:file:function:line:)-7ld70","title":"func waitForAll<C>(AsyncObject..., until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforall(_:until:tolerance:clock:file:function:line:)-94feh","title":"func waitForAll<C>([AsyncObject], until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:file:function:line:)-14cia","title":"func waitForAny([AsyncObject], count: Int, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:file:function:line:)-3wijw","title":"func waitForAny(AsyncObject..., count: Int, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:fornanoseconds:file:function:line:)-850qn","title":"func waitForAny([AsyncObject], count: Int, forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:fornanoseconds:file:function:line:)-rmj2","title":"func waitForAny(AsyncObject..., count: Int, forNanoseconds: UInt64, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:until:tolerance:clock:file:function:line:)-6r5af","title":"func waitForAny<C>([AsyncObject], count: Int, until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitforany(_:count:until:tolerance:clock:file:function:line:)-oa0m","title":"func waitForAny<C>(AsyncObject..., count: Int, until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt) async throws","type":"func"},{"path":"\/documentation\/asyncobjects\/waitfortaskcompletion(until:tolerance:clock:file:function:line:_:)","title":"func waitForTaskCompletion<C, T>(until: C.Instant, tolerance: C.Instant.Duration?, clock: C, file: String, function: String, line: UInt, () async throws -> T) async throws -> T","type":"func"},{"path":"\/documentation\/asyncobjects\/waitfortaskcompletion(withtimeoutinnanoseconds:file:function:line:_:)","title":"func waitForTaskCompletion<T>(withTimeoutInNanoseconds: UInt64, file: String, function: String, line: UInt, () async throws -> T) async throws -> T","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/asyncobjects\/globalcontinuation","title":"GlobalContinuation","type":"typealias"}],"path":"\/documentation\/asyncobjects","title":"AsyncObjects","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}