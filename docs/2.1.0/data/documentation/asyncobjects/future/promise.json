{"sections":[],"metadata":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Promise"}],"externalID":"s:12AsyncObjects6FutureC7Promisea","navigatorTitle":[{"kind":"identifier","text":"Promise"}],"role":"symbol","modules":[{"name":"AsyncObjects"}],"symbolKind":"typealias","title":"Future.Promise","roleHeading":"Type Alias"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future"]]},"abstract":[{"text":"A type that represents a closure to invoke in the future, when an element or error is available.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future\/Promise"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/future\/promise"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Promise"},{"kind":"text","text":" = ("},{"preciseIdentifier":"s:12AsyncObjects6FutureC","kind":"typeIdentifier","text":"Future","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Failure"},{"text":">.","kind":"text"},{"preciseIdentifier":"s:12AsyncObjects6FutureC0C6Resulta","text":"FutureResult","kind":"typeIdentifier","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future\/FutureResult"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"The promise closure receives one parameter: a ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" that contains","type":"text"},{"text":" ","type":"text"},{"text":"either a single element published by a ","type":"text"},{"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future","isActive":true,"type":"reference"},{"text":", or an error.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://AsyncObjects/documentation/AsyncObjects/Future/FutureResult":{"url":"\/documentation\/asyncobjects\/future\/futureresult","abstract":[{"type":"text","text":"A type that represents the result in the future, when an element or error is available."}],"type":"topic","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future\/FutureResult","navigatorTitle":[{"text":"FutureResult","kind":"identifier"}],"kind":"symbol","title":"Future.FutureResult","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FutureResult","kind":"identifier"}]},"doc://AsyncObjects/documentation/AsyncObjects/Future":{"role":"symbol","abstract":[{"type":"text","text":"An object that eventually produces a single value and then finishes or fails."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future","url":"\/documentation\/asyncobjects\/future","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Future"}],"title":"Future","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Future"}]},"doc://AsyncObjects/documentation/AsyncObjects":{"title":"AsyncObjects","kind":"symbol","role":"collection","type":"topic","abstract":[{"type":"text","text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency."}],"url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects"},"doc://AsyncObjects/documentation/AsyncObjects/Future/Promise":{"title":"Future.Promise","url":"\/documentation\/asyncobjects\/future\/promise","kind":"symbol","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Future\/Promise","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Promise"}],"navigatorTitle":[{"kind":"identifier","text":"Promise"}],"role":"symbol","abstract":[{"type":"text","text":"A type that represents a closure to invoke in the future, when an element or error is available."}],"type":"topic"}}}