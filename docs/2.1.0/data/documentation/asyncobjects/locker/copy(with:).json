{"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"]]},"kind":"symbol","metadata":{"title":"copy(with:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"copy","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NSZone","preciseIdentifier":"s:10Foundation6NSZoneV","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"keyword","text":"Any"}],"externalID":"s:12AsyncObjects6LockerC4copy4withyp10Foundation6NSZoneVSg_tF","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","modules":[{"name":"AsyncObjects"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/locker\/copy(with:)"]}],"sections":[],"abstract":[{"text":"Returns current instance that’s a copy of the receiver.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"zone","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"NSZone","preciseIdentifier":"s:10Foundation6NSZoneV","kind":"typeIdentifier"},{"text":"? = nil) -> ","kind":"text"},{"text":"Any","kind":"keyword"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":"Returns current instance object."}],"type":"paragraph"}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This parameter is ignored. Memory zones","type":"text"},{"text":" ","type":"text"},{"text":"are no longer used by Objective-C.","type":"text"}]}],"name":"zone"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Implementation provided to help to track locking status"},{"type":"text","text":" "},{"type":"text","text":"for threads for the current lock object."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://AsyncObjects/documentation/AsyncObjects/Locker/copy(with:)":{"url":"\/documentation\/asyncobjects\/locker\/copy(with:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns current instance that’s a copy of the receiver."}],"kind":"symbol","title":"copy(with:)","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10Foundation6NSZoneV"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}]},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"title":"Locker","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"navigatorTitle":[{"text":"Locker","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Locker","kind":"identifier"}],"url":"\/documentation\/asyncobjects\/locker","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"},"doc://AsyncObjects/documentation/AsyncObjects":{"title":"AsyncObjects","kind":"symbol","role":"collection","type":"topic","abstract":[{"type":"text","text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency."}],"url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects"}}}