{"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/AsyncObjects\/10Foundation9NSCopyingP","doc:\/\/AsyncObjects\/SQ","doc:\/\/AsyncObjects\/SH","doc:\/\/AsyncObjects\/s8SendableP"]}],"sections":[],"metadata":{"role":"symbol","modules":[{"name":"AsyncObjects"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"symbolKind":"class","externalID":"s:12AsyncObjects6LockerC","roleHeading":"Class","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"title":"Locker"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects"]]},"abstract":[{"text":"A synchronization object that can be used to provide exclusive access to threads.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asyncobjects\/locker"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Locker","kind":"identifier"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"text":"The values stored in the lock should be considered opaque and implementation defined,","type":"text"},{"text":" ","type":"text"},{"text":"they contain thread ownership information that the system may use to attempt to resolve priority inversions.","type":"text"},{"text":" ","type":"text"},{"text":"This lock must be unlocked from the same thread that locked it,","type":"text"},{"text":" ","type":"text"},{"text":"attempts to unlock from a different thread will cause an assertion aborting the process.","type":"text"},{"text":" ","type":"text"},{"text":"This lock must not be accessed from multiple processes or threads via shared or multiply-mapped memory,","type":"text"},{"text":" ","type":"text"},{"text":"as the lock implementation relies on the address of the lock value and owning process.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ create a lock object to provide","\/\/ exclusive access to critical resources","let lock = Locker()","\/\/ perform critical mutually exclusive action","lock.perform { \/* some action *\/ }","","\/\/ inside the critical action provided","\/\/ lock.perform can be called safely","lock.perform {","  lock.perform { \/\/ works and runs with current context","    \/* some action *\/","  }","}"],"type":"codeListing"}]}],"topicSections":[{"title":"Operators","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)"]},{"title":"Initializers","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()"]},{"title":"Instance Methods","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/NSCopying-Implementations"]}],"references":{"doc://AsyncObjects/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/AsyncObjects\/SQ"},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"title":"Locker","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"navigatorTitle":[{"text":"Locker","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Locker","kind":"identifier"}],"url":"\/documentation\/asyncobjects\/locker","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"},"doc://AsyncObjects/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/AsyncObjects\/SH"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/Equatable-Implementations":{"abstract":[],"url":"\/documentation\/asyncobjects\/locker\/equatable-implementations","kind":"article","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/Equatable-Implementations","title":"Equatable Implementations","role":"collectionGroup","type":"topic"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/hash(into:)":{"title":"hash(into:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Hashes the pointer to platform dependent lock primitive"},{"type":"text","text":" "},{"type":"text","text":"by feeding into the given hasher."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hash","kind":"identifier"},{"text":"(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","preciseIdentifier":"s:s6HasherV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/asyncobjects\/locker\/hash(into:)","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/hash(into:)"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/==(_:_:)":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:12AsyncObjects6LockerC","text":"Locker","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:12AsyncObjects6LockerC","text":"Locker","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/==(_:_:)","type":"topic","url":"\/documentation\/asyncobjects\/locker\/==(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two locks are equal."}],"title":"==(_:_:)","kind":"symbol","role":"symbol"},"doc://AsyncObjects/documentation/AsyncObjects":{"title":"AsyncObjects","kind":"symbol","role":"collection","type":"topic","abstract":[{"type":"text","text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency."}],"url":"\/documentation\/asyncobjects","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/copy(with:)":{"url":"\/documentation\/asyncobjects\/locker\/copy(with:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns current instance thatâ€™s a copy of the receiver."}],"kind":"symbol","title":"copy(with:)","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10Foundation6NSZoneV"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}]},"doc://AsyncObjects/10Foundation9NSCopyingP":{"type":"unresolvable","title":"Foundation.NSCopying","identifier":"doc:\/\/AsyncObjects\/10Foundation9NSCopyingP"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/perform(_:)":{"url":"\/documentation\/asyncobjects\/locker\/perform(_:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Performs a critical piece of work synchronously after acquiring the lock"},{"type":"text","text":" "},{"text":"and releases lock when task completes.","type":"text"}],"kind":"symbol","title":"perform(_:)","identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/perform(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"perform"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}]},"doc://AsyncObjects/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/AsyncObjects\/s8SendableP"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/NSCopying-Implementations":{"url":"\/documentation\/asyncobjects\/locker\/nscopying-implementations","type":"topic","kind":"article","title":"NSCopying Implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/NSCopying-Implementations"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/init()":{"abstract":[{"type":"text","text":"Allocates and initializes platform dependent lock primitive."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"url":"\/documentation\/asyncobjects\/locker\/init()","kind":"symbol","role":"symbol","title":"init()","type":"topic"}}}