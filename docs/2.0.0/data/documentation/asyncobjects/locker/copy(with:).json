{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"zone"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10ObjectiveC6NSZoneV"},{"kind":"text","text":"? = nil) -> "},{"kind":"keyword","text":"Any"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Returns current instance object."}]}]},{"kind":"parameters","parameters":[{"name":"zone","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parameter is ignored. Memory zones"},{"type":"text","text":" "},{"type":"text","text":"are no longer used by Objective-C."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implementation provided to help to track locking status"},{"type":"text","text":" "},{"type":"text","text":"for threads for the current lock object."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/asyncobjects\/locker\/copy(with:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Returns current instance that’s a copy of the receiver."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10ObjectiveC6NSZoneV"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}],"title":"copy(with:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:12AsyncObjects6LockerC4copy4withyp10ObjectiveC6NSZoneVSg_tF","modules":[{"name":"AsyncObjects"}]},"hierarchy":{"paths":[["doc:\/\/AsyncObjects\/documentation\/AsyncObjects","doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker"]]},"references":{"doc://AsyncObjects/documentation/AsyncObjects":{"role":"collection","title":"AsyncObjects","abstract":[{"type":"text","text":"Several synchronization primitives and task synchronization mechanisms introduced to aid in modern swift concurrency."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects"},"doc://AsyncObjects/documentation/AsyncObjects/Locker/copy(with:)":{"role":"symbol","title":"copy(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"copy"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NSZone","preciseIdentifier":"s:10ObjectiveC6NSZoneV"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"}],"abstract":[{"type":"text","text":"Returns current instance that’s a copy of the receiver."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker\/copy(with:)","kind":"symbol","type":"topic","url":"\/documentation\/asyncobjects\/locker\/copy(with:)"},"doc://AsyncObjects/documentation/AsyncObjects/Locker":{"role":"symbol","title":"Locker","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Locker"}],"abstract":[{"type":"text","text":"A synchronization object that can be used to provide exclusive access to threads."}],"identifier":"doc:\/\/AsyncObjects\/documentation\/AsyncObjects\/Locker","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Locker"}],"url":"\/documentation\/asyncobjects\/locker"}}}